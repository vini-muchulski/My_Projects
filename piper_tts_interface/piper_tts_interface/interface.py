# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'interface.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
os.environ["PYGAME_HIDE_SUPPORT_PROMPT"] = "1"  # Desativa o print do Pygame

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
import subprocess
import pygame
import shutil

audio_gerado = False

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(866, 368)
        MainWindow.setStyleSheet("background-color: #F0F3FF;")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 10, 161, 41))
        self.label.setMaximumSize(QtCore.QSize(161, 41))
        self.label.setStyleSheet("background-color: #333; /* Cor de fundo escura */\n"
"  color: #DC5F00; /* Cor do texto branca */\n"
"  border: none; /* Sem borda */\n"
"  padding: 10px 20px; /* Espaçamento interno */\n"
"  border-radius: 5px; /* Borda arredondada */\n"
"  font-size: 16px; /* Tamanho da fonte */")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 60, 191, 41))
        self.label_2.setMaximumSize(QtCore.QSize(191, 16777215))
        self.label_2.setStyleSheet("background-color: #333; /* Cor de fundo escura */\n"
"  color: #DC5F00; /* Cor do texto branca */\n"
"  border: none; /* Sem borda */\n"
"  padding: 10px 20px; /* Espaçamento interno */\n"
"  border-radius: 5px; /* Borda arredondada */\n"
"  font-size: 16px; /* Tamanho da fonte */")
        self.label_2.setObjectName("label_2")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(20, 130, 811, 201))
        self.widget.setObjectName("widget")
        self.gridLayout = QtWidgets.QGridLayout(self.widget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.btn_gerar_audio = QtWidgets.QPushButton(self.widget)
        self.btn_gerar_audio.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.btn_gerar_audio.setStyleSheet("background-color: #333; /* Cor de fundo escura */\n"
"  color: #fff; /* Cor do texto branca */\n"
"  border: none; /* Sem borda */\n"
"  padding: 10px 20px; /* Espaçamento interno */\n"
"  border-radius: 5px; /* Borda arredondada */\n"
"  font-size: 16px; /* Tamanho da fonte */")
        self.btn_gerar_audio.setObjectName("btn_gerar_audio")
        self.gridLayout.addWidget(self.btn_gerar_audio, 0, 1, 1, 1)
        self.btn_salvar_arquivo = QtWidgets.QPushButton(self.widget)
        self.btn_salvar_arquivo.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.btn_salvar_arquivo.setStyleSheet("background-color: #333; /* Cor de fundo escura */\n"
"  color: #fff; /* Cor do texto branca */\n"
"  border: none; /* Sem borda */\n"
"  padding: 10px 20px; /* Espaçamento interno */\n"
"  border-radius: 5px; /* Borda arredondada */\n"
"  font-size: 16px; /* Tamanho da fonte */")
        self.btn_salvar_arquivo.setObjectName("btn_salvar_arquivo")
        self.gridLayout.addWidget(self.btn_salvar_arquivo, 1, 1, 1, 1)
        self.input_text = QtWidgets.QTextEdit(self.widget)
        self.input_text.setObjectName("input_text")
        self.gridLayout.addWidget(self.input_text, 0, 0, 2, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 866, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        self.btn_gerar_audio.clicked.connect(self.gerar_audio)
        self.btn_salvar_arquivo.clicked.connect(self.salvar_arquivo)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">PIPER TTS</span></p></body></html>"))
        self.label_2.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Text To Speech</span></p></body></html>"))
        self.btn_gerar_audio.setText(_translate("MainWindow", "Gerar audio"))
        self.btn_salvar_arquivo.setText(_translate("MainWindow", "Salvar arquivo"))
        


    def  gerar_audio(self):
        
        prompt = self.input_text.toPlainText()
        
        demo = open("demo.txt","w",encoding="utf-8")
        demo.write(prompt)
        demo.close()

        # Comando que você quer executar
        comando = "type  .\demo.txt | .\piper.exe -m .\pt_BR-faber-medium.onnx -f audio.wav" 
        #print(comando)

    
        resultado = subprocess.run(comando, shell=True, capture_output=True, text=True)
        
        if resultado.returncode == 0:
                print(resultado.stdout + "gerado com sucesso!")
                
                print(prompt)
                
                # Inicializa o mixer do pygame
                pygame.mixer.init()

                # Carrega o arquivo de áudio
                pygame.mixer.music.load("audio.wav")

                # Reproduz o arquivo de áudio
                pygame.mixer.music.play()

                # Mantém o programa rodando até que o áudio termine
                while pygame.mixer.music.get_busy():
                        pygame.time.Clock().tick(10)
                
                pygame.mixer.quit()       
                audio_gerado = True
        else:
            print("Erro:", resultado.stderr)
            

    def salvar_arquivo(self):
            
            if audio_gerado == False:
                prompt = self.input_text.toPlainText()
                
                demo = open("demo.txt","w",encoding="utf-8")
                demo.write(prompt)
                demo.close()

                        # Comando que você quer executar
                comando = "type  .\demo.txt | .\piper.exe -m .\pt_BR-faber-medium.onnx -f audio.wav" 
                        #print(comando)

                resultado = subprocess.run(comando, shell=True, capture_output=True, text=True)
                
                

            # Abre um diálogo de seleção de diretório
            options = QFileDialog.Options()
            options |= QFileDialog.ShowDirsOnly
            directory = QFileDialog.getExistingDirectory(self.centralwidget
                                                         , "Select Directory", 
                                                         "", 
                                                         options=options)
            
            
            if directory:
                try:
                        # Cria o caminho completo para o arquivo de destino
                        caminho_destino = os.path.join(directory, "audio.wav")  
                        
                        # Copia o arquivo audio.wav para o diretório escolhido
                        shutil.copy("audio.wav", caminho_destino)  

                        print(f"Arquivo salvo em: {caminho_destino}")
                except Exception as e:
                        print(f"Erro ao salvar o arquivo: {e}")
                        


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.setWindowIcon(QtGui.QIcon('logo.jpeg'))
    MainWindow.setWindowTitle("Interface")
    
    MainWindow.show()
    sys.exit(app.exec_())
